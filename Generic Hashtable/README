Generic Hash Table.

Submitted files:
GenericHashTable.h - header file, funcation decleretion.
GenericHashTable.c - implementaion of the function and the actual code.
README.txt - describes the exercise.

The program implements Hash table using linked list for collisions.
The program supports the functionality: create table,create object,add object,remove object,search object,print table etc.

Main fuctions explenetion -

* Table* createTable(int size, int dType, int listLength) - The function gets the original size and the type of the data in the table elements.
it initializes the Table struct members. 
On success, the function returns a pointer to the new created Table, otherwise, it return NULL.

* void freeTable(Table* table) - The function release all the allocated members of struct Table.

* int add(Table* table, void* data) -  The function adds data to the hashtable (as described in the exe definition)
On success, the function returns the array index of the added data, otherwise, it return -1.

* int removeObj(Table* table, void* data) - The function removes the Object which its data equals to data, if there are more than one, it removes the first one.
On success, the function returns the array index of the removed data, otherwise, it returns -1.
-1 is also returned in the case where there is no such object.

* Object* search(Table* table, void* data) - The function search for an object that its data is equal to data and returns a pointer to that object.
If there is no such object or in a case of an error, NULL is returned.

* void printTable(Table* table) - The function print the table (the format is in the exe definition)

* Object* createObject(void* data) - This function creates an object and return the pointer to it or NULL if there is some error.

* void freeObject(Object* obj, int type) - This function frees an object, the data of the object should also be freed.

* int isEqual(int type, void* data1, void* data2) - check the equality of the data of two objects. The implementation is different depending the type of the data.
the function returns 0 if they are equal or some other value if they are not equal.

* int intHashFun(int* key, int origSize) - returns the hash value of an integer, which is key mod origSize.

* int strHashFun(char* key, int origSize) - returns the hash value of an string, which is m mod origSize, where m is the sum of the ascii value of all the 
character in key
